ARM GAS  /tmp/ccKwvIWk.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC0:
  17 0000 526F7461 		.ascii	"RotatoryWheelTask\000"
  17      746F7279 
  17      57686565 
  17      6C546173 
  17      6B00
  18 0012 0000     		.align	2
  19              	.LC2:
  20 0014 41726D54 		.ascii	"ArmTask\000"
  20      61736B00 
  21              		.align	2
  22              	.LC4:
  23 001c 55706461 		.ascii	"UpdateTask\000"
  23      74655461 
  23      736B00
  24 0027 00       		.align	2
  25              	.LC6:
  26 0028 636F6E76 		.ascii	"conveyerTask\000"
  26      65796572 
  26      5461736B 
  26      00
  27              		.text
  28              	.Ltext0:
  29              		.cfi_sections	.debug_frame
  30              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  31              		.align	1
  32              		.global	vApplicationGetIdleTaskMemory
  33              		.arch armv7e-m
  34              		.syntax unified
  35              		.thumb
  36              		.thumb_func
  37              		.fpu fpv4-sp-d16
  39              	vApplicationGetIdleTaskMemory:
  40              	.LVL0:
  41              	.LFB135:
  42              		.file 1 "Core/Src/sys/freertos.c"
   1:Core/Src/sys/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/sys/freertos.c **** /**
   3:Core/Src/sys/freertos.c ****   ******************************************************************************
   4:Core/Src/sys/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/sys/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/sys/freertos.c ****   ******************************************************************************
ARM GAS  /tmp/ccKwvIWk.s 			page 2


   7:Core/Src/sys/freertos.c ****   * @attention
   8:Core/Src/sys/freertos.c ****   *
   9:Core/Src/sys/freertos.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Core/Src/sys/freertos.c ****   * All rights reserved.</center></h2>
  11:Core/Src/sys/freertos.c ****   *
  12:Core/Src/sys/freertos.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/sys/freertos.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/sys/freertos.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/sys/freertos.c ****   *                             www.st.com/SLA0044
  16:Core/Src/sys/freertos.c ****   *
  17:Core/Src/sys/freertos.c ****   ******************************************************************************
  18:Core/Src/sys/freertos.c ****   */
  19:Core/Src/sys/freertos.c **** /* USER CODE END Header */
  20:Core/Src/sys/freertos.c **** 
  21:Core/Src/sys/freertos.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/sys/freertos.c **** #include "FreeRTOS.h"
  23:Core/Src/sys/freertos.c **** #include "task.h"
  24:Core/Src/sys/freertos.c **** #include "main.h"
  25:Core/Src/sys/freertos.c **** #include "cmsis_os.h"
  26:Core/Src/sys/freertos.c **** #include"semphr.h"
  27:Core/Src/sys/freertos.c **** 
  28:Core/Src/sys/freertos.c **** /* Private includes ----------------------------------------------------------*/
  29:Core/Src/sys/freertos.c **** /* USER CODE BEGIN Includes */     
  30:Core/Src/sys/freertos.c **** 
  31:Core/Src/sys/freertos.c **** /* USER CODE END Includes */
  32:Core/Src/sys/freertos.c **** 
  33:Core/Src/sys/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  34:Core/Src/sys/freertos.c **** /* USER CODE BEGIN PTD */
  35:Core/Src/sys/freertos.c **** 
  36:Core/Src/sys/freertos.c **** /* USER CODE END PTD */
  37:Core/Src/sys/freertos.c **** 
  38:Core/Src/sys/freertos.c **** /* Private define ------------------------------------------------------------*/
  39:Core/Src/sys/freertos.c **** /* USER CODE BEGIN PD */
  40:Core/Src/sys/freertos.c **** 
  41:Core/Src/sys/freertos.c **** /* USER CODE END PD */
  42:Core/Src/sys/freertos.c **** 
  43:Core/Src/sys/freertos.c **** /* Private macro -------------------------------------------------------------*/
  44:Core/Src/sys/freertos.c **** /* USER CODE BEGIN PM */
  45:Core/Src/sys/freertos.c **** 
  46:Core/Src/sys/freertos.c **** /* USER CODE END PM */
  47:Core/Src/sys/freertos.c **** 
  48:Core/Src/sys/freertos.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/sys/freertos.c **** /* USER CODE BEGIN Variables */
  50:Core/Src/sys/freertos.c **** 
  51:Core/Src/sys/freertos.c **** /* USER CODE END Variables */
  52:Core/Src/sys/freertos.c **** osThreadId rotatory_wheelHandle;
  53:Core/Src/sys/freertos.c **** osThreadId arm_handle;
  54:Core/Src/sys/freertos.c **** osThreadId conveyerTaskHandle;
  55:Core/Src/sys/freertos.c **** osThreadId updateTaskHandle;
  56:Core/Src/sys/freertos.c **** SemaphoreHandle_t binSem;
  57:Core/Src/sys/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  58:Core/Src/sys/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  59:Core/Src/sys/freertos.c ****    
  60:Core/Src/sys/freertos.c **** /* USER CODE END FunctionPrototypes */
  61:Core/Src/sys/freertos.c **** 
  62:Core/Src/sys/freertos.c **** void rotatoryWheelTask(void const * argument);
  63:Core/Src/sys/freertos.c **** void armTask(void const * argument);
ARM GAS  /tmp/ccKwvIWk.s 			page 3


  64:Core/Src/sys/freertos.c **** void updateTask(void const * argument);
  65:Core/Src/sys/freertos.c **** void ConveyerTask(void const * argument);
  66:Core/Src/sys/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  67:Core/Src/sys/freertos.c **** 
  68:Core/Src/sys/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  69:Core/Src/sys/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  70:Core/Src/sys/freertos.c **** 
  71:Core/Src/sys/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
  72:Core/Src/sys/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
  73:Core/Src/sys/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  74:Core/Src/sys/freertos.c ****   
  75:Core/Src/sys/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  76:Core/Src/sys/freertos.c **** {
  43              		.loc 1 76 1 view -0
  44              		.cfi_startproc
  45              		@ args = 0, pretend = 0, frame = 0
  46              		@ frame_needed = 0, uses_anonymous_args = 0
  47              		@ link register save eliminated.
  77:Core/Src/sys/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  48              		.loc 1 77 3 view .LVU1
  49              		.loc 1 77 25 is_stmt 0 view .LVU2
  50 0000 034B     		ldr	r3, .L2
  51 0002 0360     		str	r3, [r0]
  78:Core/Src/sys/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  52              		.loc 1 78 3 is_stmt 1 view .LVU3
  53              		.loc 1 78 27 is_stmt 0 view .LVU4
  54 0004 034B     		ldr	r3, .L2+4
  55 0006 0B60     		str	r3, [r1]
  79:Core/Src/sys/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  56              		.loc 1 79 3 is_stmt 1 view .LVU5
  57              		.loc 1 79 25 is_stmt 0 view .LVU6
  58 0008 8023     		movs	r3, #128
  59 000a 1360     		str	r3, [r2]
  80:Core/Src/sys/freertos.c ****   /* place for user code */
  81:Core/Src/sys/freertos.c **** }                   
  60              		.loc 1 81 1 view .LVU7
  61 000c 7047     		bx	lr
  62              	.L3:
  63 000e 00BF     		.align	2
  64              	.L2:
  65 0010 00000000 		.word	.LANCHOR0
  66 0014 00000000 		.word	.LANCHOR1
  67              		.cfi_endproc
  68              	.LFE135:
  70              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
  71              		.align	1
  72              		.global	MX_FREERTOS_Init
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu fpv4-sp-d16
  78              	MX_FREERTOS_Init:
  79              	.LFB136:
  82:Core/Src/sys/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  83:Core/Src/sys/freertos.c **** 
  84:Core/Src/sys/freertos.c **** /**
  85:Core/Src/sys/freertos.c ****   * @brief  FreeRTOS initialization
ARM GAS  /tmp/ccKwvIWk.s 			page 4


  86:Core/Src/sys/freertos.c ****   * @param  None
  87:Core/Src/sys/freertos.c ****   * @retval None
  88:Core/Src/sys/freertos.c ****   */
  89:Core/Src/sys/freertos.c **** void MX_FREERTOS_Init(void) {
  80              		.loc 1 89 29 is_stmt 1 view -0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 112
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84 0000 10B5     		push	{r4, lr}
  85              	.LCFI0:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 4, -8
  88              		.cfi_offset 14, -4
  89 0002 9CB0     		sub	sp, sp, #112
  90              	.LCFI1:
  91              		.cfi_def_cfa_offset 120
  90:Core/Src/sys/freertos.c ****   /* USER CODE BEGIN Init */
  91:Core/Src/sys/freertos.c ****        
  92:Core/Src/sys/freertos.c ****   /* USER CODE END Init */
  93:Core/Src/sys/freertos.c **** 
  94:Core/Src/sys/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
  95:Core/Src/sys/freertos.c ****   /* add mutexes, ... */
  96:Core/Src/sys/freertos.c ****   /* USER CODE END RTOS_MUTEX */
  97:Core/Src/sys/freertos.c **** 
  98:Core/Src/sys/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
  99:Core/Src/sys/freertos.c ****   /* add semaphores, ... */
 100:Core/Src/sys/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
 101:Core/Src/sys/freertos.c **** 
 102:Core/Src/sys/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 103:Core/Src/sys/freertos.c ****   /* start timers, add new ones, ... */
 104:Core/Src/sys/freertos.c ****   /* USER CODE END RTOS_TIMERS */
 105:Core/Src/sys/freertos.c **** 
 106:Core/Src/sys/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 107:Core/Src/sys/freertos.c ****   /* add queues, ... */
 108:Core/Src/sys/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 109:Core/Src/sys/freertos.c **** 
 110:Core/Src/sys/freertos.c ****   /* Create the thread(s) */
 111:Core/Src/sys/freertos.c ****   /* definition and creation of defaultTask */
 112:Core/Src/sys/freertos.c ****   osThreadDef(RotatoryWheelTask, rotatoryWheelTask,  osPriorityRealtime, 0,500);
  92              		.loc 1 112 3 view .LVU9
  93 0004 244C     		ldr	r4, .L6
  94 0006 0DF1540C 		add	ip, sp, #84
  95 000a A646     		mov	lr, r4
  96 000c BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
  97 0010 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
  98 0014 9EE80700 		ldm	lr, {r0, r1, r2}
  99 0018 8CE80700 		stm	ip, {r0, r1, r2}
 113:Core/Src/sys/freertos.c ****   rotatory_wheelHandle = osThreadCreate(osThread(RotatoryWheelTask), NULL);
 100              		.loc 1 113 3 view .LVU10
 101              		.loc 1 113 26 is_stmt 0 view .LVU11
 102 001c 0021     		movs	r1, #0
 103 001e 15A8     		add	r0, sp, #84
 104 0020 FFF7FEFF 		bl	osThreadCreate
 105              	.LVL1:
 106              		.loc 1 113 24 view .LVU12
 107 0024 1D4B     		ldr	r3, .L6+4
 108 0026 1860     		str	r0, [r3]
ARM GAS  /tmp/ccKwvIWk.s 			page 5


 114:Core/Src/sys/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 115:Core/Src/sys/freertos.c ****   /* add threads, ... */
 116:Core/Src/sys/freertos.c ****   osThreadDef(ArmTask, armTask, osPriorityRealtime, 0, 500);
 109              		.loc 1 116 3 is_stmt 1 view .LVU13
 110 0028 0DF1380C 		add	ip, sp, #56
 111 002c 04F11C0E 		add	lr, r4, #28
 112 0030 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 113 0034 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 114 0038 9EE80700 		ldm	lr, {r0, r1, r2}
 115 003c 8CE80700 		stm	ip, {r0, r1, r2}
 117:Core/Src/sys/freertos.c ****   arm_handle= osThreadCreate(osThread(ArmTask), NULL);
 116              		.loc 1 117 3 view .LVU14
 117              		.loc 1 117 15 is_stmt 0 view .LVU15
 118 0040 0021     		movs	r1, #0
 119 0042 0EA8     		add	r0, sp, #56
 120 0044 FFF7FEFF 		bl	osThreadCreate
 121              	.LVL2:
 122              		.loc 1 117 13 view .LVU16
 123 0048 154B     		ldr	r3, .L6+8
 124 004a 1860     		str	r0, [r3]
 118:Core/Src/sys/freertos.c **** 
 119:Core/Src/sys/freertos.c ****   osThreadDef(UpdateTask, updateTask, osPriorityRealtime, 0, 500);
 125              		.loc 1 119 3 is_stmt 1 view .LVU17
 126 004c 0DF11C0C 		add	ip, sp, #28
 127 0050 04F1380E 		add	lr, r4, #56
 128 0054 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 129 0058 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 130 005c 9EE80700 		ldm	lr, {r0, r1, r2}
 131 0060 8CE80700 		stm	ip, {r0, r1, r2}
 120:Core/Src/sys/freertos.c ****   updateTaskHandle= osThreadCreate(osThread(UpdateTask), NULL);
 132              		.loc 1 120 3 view .LVU18
 133              		.loc 1 120 21 is_stmt 0 view .LVU19
 134 0064 0021     		movs	r1, #0
 135 0066 07A8     		add	r0, sp, #28
 136 0068 FFF7FEFF 		bl	osThreadCreate
 137              	.LVL3:
 138              		.loc 1 120 19 view .LVU20
 139 006c 0D4B     		ldr	r3, .L6+12
 140 006e 1860     		str	r0, [r3]
 121:Core/Src/sys/freertos.c **** 
 122:Core/Src/sys/freertos.c **** 
 123:Core/Src/sys/freertos.c ****    osThreadDef(conveyerTask, ConveyerTask, osPriorityRealtime, 0, 500);
 141              		.loc 1 123 4 is_stmt 1 view .LVU21
 142 0070 EE46     		mov	lr, sp
 143 0072 04F1540C 		add	ip, r4, #84
 144 0076 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 145 007a AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 146 007e 9CE80700 		ldm	ip, {r0, r1, r2}
 147 0082 8EE80700 		stm	lr, {r0, r1, r2}
 124:Core/Src/sys/freertos.c ****   conveyerTaskHandle= osThreadCreate(osThread(conveyerTask), NULL);
 148              		.loc 1 124 3 view .LVU22
 149              		.loc 1 124 23 is_stmt 0 view .LVU23
 150 0086 0021     		movs	r1, #0
 151 0088 6846     		mov	r0, sp
 152 008a FFF7FEFF 		bl	osThreadCreate
 153              	.LVL4:
 154              		.loc 1 124 21 view .LVU24
ARM GAS  /tmp/ccKwvIWk.s 			page 6


 155 008e 064B     		ldr	r3, .L6+16
 156 0090 1860     		str	r0, [r3]
 125:Core/Src/sys/freertos.c ****   /* USER CODE END RTOS_THREADS */
 126:Core/Src/sys/freertos.c **** 
 127:Core/Src/sys/freertos.c **** }
 157              		.loc 1 127 1 view .LVU25
 158 0092 1CB0     		add	sp, sp, #112
 159              	.LCFI2:
 160              		.cfi_def_cfa_offset 8
 161              		@ sp needed
 162 0094 10BD     		pop	{r4, pc}
 163              	.L7:
 164 0096 00BF     		.align	2
 165              	.L6:
 166 0098 00000000 		.word	.LANCHOR2
 167 009c 00000000 		.word	.LANCHOR3
 168 00a0 00000000 		.word	.LANCHOR4
 169 00a4 00000000 		.word	.LANCHOR5
 170 00a8 00000000 		.word	.LANCHOR6
 171              		.cfi_endproc
 172              	.LFE136:
 174              		.global	binSem
 175              		.global	updateTaskHandle
 176              		.global	conveyerTaskHandle
 177              		.global	arm_handle
 178              		.global	rotatory_wheelHandle
 179              		.section	.rodata
 180              		.align	2
 181              		.set	.LANCHOR2,. + 0
 182              	.LC8:
 183 0000 00000000 		.word	.LC0
 184 0004 00000000 		.word	rotatoryWheelTask
 185 0008 0300     		.short	3
 186 000a 0000     		.space	2
 187 000c 00000000 		.word	0
 188 0010 F4010000 		.word	500
 189 0014 00000000 		.word	0
 190 0018 00000000 		.word	0
 191              	.LC9:
 192 001c 14000000 		.word	.LC2
 193 0020 00000000 		.word	armTask
 194 0024 0300     		.short	3
 195 0026 0000     		.space	2
 196 0028 00000000 		.word	0
 197 002c F4010000 		.word	500
 198 0030 00000000 		.word	0
 199 0034 00000000 		.word	0
 200              	.LC10:
 201 0038 1C000000 		.word	.LC4
 202 003c 00000000 		.word	updateTask
 203 0040 0300     		.short	3
 204 0042 0000     		.space	2
 205 0044 00000000 		.word	0
 206 0048 F4010000 		.word	500
 207 004c 00000000 		.word	0
 208 0050 00000000 		.word	0
 209              	.LC11:
ARM GAS  /tmp/ccKwvIWk.s 			page 7


 210 0054 28000000 		.word	.LC6
 211 0058 00000000 		.word	ConveyerTask
 212 005c 0300     		.short	3
 213 005e 0000     		.space	2
 214 0060 00000000 		.word	0
 215 0064 F4010000 		.word	500
 216 0068 00000000 		.word	0
 217 006c 00000000 		.word	0
 218              		.section	.bss.arm_handle,"aw",%nobits
 219              		.align	2
 220              		.set	.LANCHOR4,. + 0
 223              	arm_handle:
 224 0000 00000000 		.space	4
 225              		.section	.bss.binSem,"aw",%nobits
 226              		.align	2
 229              	binSem:
 230 0000 00000000 		.space	4
 231              		.section	.bss.conveyerTaskHandle,"aw",%nobits
 232              		.align	2
 233              		.set	.LANCHOR6,. + 0
 236              	conveyerTaskHandle:
 237 0000 00000000 		.space	4
 238              		.section	.bss.rotatory_wheelHandle,"aw",%nobits
 239              		.align	2
 240              		.set	.LANCHOR3,. + 0
 243              	rotatory_wheelHandle:
 244 0000 00000000 		.space	4
 245              		.section	.bss.updateTaskHandle,"aw",%nobits
 246              		.align	2
 247              		.set	.LANCHOR5,. + 0
 250              	updateTaskHandle:
 251 0000 00000000 		.space	4
 252              		.section	.bss.xIdleStack,"aw",%nobits
 253              		.align	2
 254              		.set	.LANCHOR1,. + 0
 257              	xIdleStack:
 258 0000 00000000 		.space	512
 258      00000000 
 258      00000000 
 258      00000000 
 258      00000000 
 259              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 260              		.align	2
 261              		.set	.LANCHOR0,. + 0
 264              	xIdleTaskTCBBuffer:
 265 0000 00000000 		.space	84
 265      00000000 
 265      00000000 
 265      00000000 
 265      00000000 
 266              		.text
 267              	.Letext0:
 268              		.file 2 "/home/love/Documents/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_de
 269              		.file 3 "/home/love/Documents/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint
 270              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 271              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 272              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccKwvIWk.s 			page 8


 273              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 274              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 275              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  /tmp/ccKwvIWk.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
     /tmp/ccKwvIWk.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/ccKwvIWk.s:31     .text.vApplicationGetIdleTaskMemory:0000000000000000 $t
     /tmp/ccKwvIWk.s:39     .text.vApplicationGetIdleTaskMemory:0000000000000000 vApplicationGetIdleTaskMemory
     /tmp/ccKwvIWk.s:65     .text.vApplicationGetIdleTaskMemory:0000000000000010 $d
     /tmp/ccKwvIWk.s:71     .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/ccKwvIWk.s:78     .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/ccKwvIWk.s:166    .text.MX_FREERTOS_Init:0000000000000098 $d
     /tmp/ccKwvIWk.s:229    .bss.binSem:0000000000000000 binSem
     /tmp/ccKwvIWk.s:250    .bss.updateTaskHandle:0000000000000000 updateTaskHandle
     /tmp/ccKwvIWk.s:236    .bss.conveyerTaskHandle:0000000000000000 conveyerTaskHandle
     /tmp/ccKwvIWk.s:223    .bss.arm_handle:0000000000000000 arm_handle
     /tmp/ccKwvIWk.s:243    .bss.rotatory_wheelHandle:0000000000000000 rotatory_wheelHandle
     /tmp/ccKwvIWk.s:180    .rodata:0000000000000000 $d
     /tmp/ccKwvIWk.s:219    .bss.arm_handle:0000000000000000 $d
     /tmp/ccKwvIWk.s:226    .bss.binSem:0000000000000000 $d
     /tmp/ccKwvIWk.s:232    .bss.conveyerTaskHandle:0000000000000000 $d
     /tmp/ccKwvIWk.s:239    .bss.rotatory_wheelHandle:0000000000000000 $d
     /tmp/ccKwvIWk.s:246    .bss.updateTaskHandle:0000000000000000 $d
     /tmp/ccKwvIWk.s:253    .bss.xIdleStack:0000000000000000 $d
     /tmp/ccKwvIWk.s:257    .bss.xIdleStack:0000000000000000 xIdleStack
     /tmp/ccKwvIWk.s:260    .bss.xIdleTaskTCBBuffer:0000000000000000 $d
     /tmp/ccKwvIWk.s:264    .bss.xIdleTaskTCBBuffer:0000000000000000 xIdleTaskTCBBuffer

UNDEFINED SYMBOLS
osThreadCreate
rotatoryWheelTask
armTask
updateTask
ConveyerTask
